[
  {
    "name": "retrieve from collection",
    "functions": [
      {
        "title": "get",
        "description":
          "Returns a value by key from maps and by index from vectors.",
        "examples": [
          {
            "lines": ["{:dot *dot-green*", ":rect *rect-blue*}", ":dot)"],
            "output": ["*dot-green*"]
          },
          {
            "lines": ["[*dot-green,rect-blue*]", "1)"],
            "output": ["*rect-blue*"]
          }
        ],
        "examples-link": "http://clojuredocs.org/clojure.core/get",
        "source-link":
          "https://github.com/clojure/clojure/blob/clojure-1.9.0-alpha14/src/clj/clojure/core.clj#L1491"
      },
      {
        "title": "get-in",
        "description":
          "Returns a value in a nested map by a vector of keys. Also by a vector of indices in a nested vector.",
        "examples": [
          {
            "lines": [
              "{:dots {",
              " :green *dot-green*",
              " :blue *dot-blue* }",
              ":rects {",
              " :blue *rect-blue*",
              " :purple *rect-purple* }",
              "}",
              "[:dots :blue])"
            ],
            "output": ["*dot-blue*"]
          }
        ],
        "examples-link": "http://clojuredocs.org/clojure.core/get-in",
        "source-link":
          "https://github.com/clojure/clojure/blob/clojure-1.9.0-alpha14/src/clj/clojure/core.clj#L6024"
      },
      {
        "title": "nth",
        "description": "Returns the value at the given index.",
        "examples": [
          {
            "lines": ["[*dot-green,rect-blue,dot-purple*] 1)"],
            "output": ["*rect-blue*"]
          }
        ],
        "examples-link": "http://clojuredocs.org/clojure.core/nth",
        "source-link":
          "https://github.com/clojure/clojure/blob/clojure-1.9.0-alpha14/src/clj/clojure/core.clj#L881"
      },
      {
        "title": "rand-nth",
        "description": "Returns a random element from a collection.",
        "examples": [
          {
            "lines": ["[*dot-green,rect-blue,dot-purple*])"],
            "output": ["*rect-blue*"]
          },
          {
            "lines": ["[*dot-green,rect-blue,dot-purple*])"],
            "output": ["*dot-purple*"]
          }
        ],
        "examples-link": "http://clojuredocs.org/clojure.core/rand-nth",
        "source-link":
          "https://github.com/clojure/clojure/blob/clojure-1.9.0-alpha14/src/clj/clojure/core.clj#L7106"
      },
      {
        "title": "filter",
        "description":
          "Applies a boolean function to all items in a collection and return a list of all items returning TRUE.",
        "examples": [
          {
            "lines": [
              "purple?",
              "[*dot-purple,rect-blue,dot-blue,dot-green,rect-purple*])"
            ],
            "output": ["(*dot-purple,rect-purple*)"]
          }
        ],
        "examples-link": "http://clojuredocs.org/clojure.core/filter",
        "source-link":
          "https://github.com/clojure/clojure/blob/clojure-1.9.0-alpha14/src/clj/clojure/core.clj#L2766"
      },
      {
        "title": "first",
        "description": "Returns the first value of a collection.",
        "examples": [
          {
            "lines": ["[*dot-green,dot-blue,rect-blue*])"],
            "output": ["*dot-green*"]
          }
        ],
        "examples-link": "http://clojuredocs.org/clojure.core/first",
        "source-link":
          "https://github.com/clojure/clojure/blob/clojure-1.9.0-alpha14/src/clj/clojure/core.clj#L49"
      },

      {
        "title": "last",
        "description": "Returns the last value of a collection.",
        "examples": [
          {
            "lines": ["[*dot-blue,dot-purple,rect-green*])"],
            "output": ["*rect-green*"]
          }
        ],
        "examples-link": "http://clojuredocs.org/clojure.core/last",
        "source-link":
          "https://github.com/clojure/clojure/blob/clojure-1.9.0-alpha14/src/clj/clojure/core.clj#L262"
      },
      {
        "title": "take",
        "description": "Returns the first n elements from a collection.",
        "examples": [
          {
            "lines": [
              "2 [*dot-blue,dot-purple,rect-green,rect-blue,dot-blue*])"
            ],
            "output": ["(*dot-blue,dot-purple*)"]
          }
        ],
        "examples-link": "http://clojuredocs.org/clojure.core/take",
        "source-link":
          "https://github.com/clojure/clojure/blob/clojure-1.9.0-alpha14/src/clj/clojure/core.clj#L2834"
      }
    ]
  },
  {
    "name": "work with collections",
    "functions": [
      {
        "title": "map",
        "description":
          "Applies a function to every item in a collection and returns a new list of resulting items.",
        "examples": [
          {
            "lines": [
              "make-blue",
              "[*dot-green,rect-green,dot-purple,dot-green,rect-purple*])"
            ],
            "output": ["(*dot-blue,rect-blue,dot-blue,dot-blue,rect-blue*)"]
          }
        ],
        "examples-link": "http://clojuredocs.org/clojure.core/map",
        "source-link":
          "https://github.com/clojure/clojure/blob/clojure-1.9.0-alpha14/src/clj/clojure/core.clj#L2700"
      },
      {
        "title": "for",
        "description":
          "Given binding/collection pairs are iterated in a nested fashion.",
        "examples": [
          {
            "lines": [
              "[x [*dot-green,rect-blue*] y [*dot-blue,rect-purple*]]",
              "[x y])"
            ],
            "output": [
              "([*dot-green,dot-blue*][*dot-green,rect-purple*]",
              "[*rect-blue,dot-blue*][*rect-blue,rect-purple*])"
            ]
          }
        ],
        "examples-link": "http://clojuredocs.org/clojure.core/for",
        "source-link":
          "https://github.com/clojure/clojure/blob/clojure-1.9.0-alpha14/src/clj/clojure/core.clj#L4576"
      },
      {
        "title": "partition",
        "description":
          "Splits a collection into chunks of n elements. Ignores elements at the end that do not count up to n.",
        "examples": [
          {
            "lines": [
              "2 [*dot-blue,rect-blue,dot-purple,rect-purple,dot-green*])"
            ],
            "output": ["((*dot-blue,rect-blue*)(*dot-purple,rect-purple*))"]
          }
        ],
        "examples-link": "http://clojuredocs.org/clojure.core/partition",
        "source-link":
          "https://github.com/clojure/clojure/blob/clojure-1.9.0-alpha14/src/clj/clojure/core.clj#L3157"
      }
    ]
  },

  {
    "name": "\"change\" collections",
    "functions": [
      {
        "title": "empty",
        "description": "Returns an empty version of a given collection.",
        "examples": [
          {
            "lines": ["[*dot-purple,dot-green,rect-purple*])"],
            "output": ["[]"]
          },
          {
            "lines": ["{:first *dot-purple*", " :second *rect-blue*})"],
            "output": ["{}"]
          }
        ],
        "examples-link": "http://clojuredocs.org/clojure.core/empty",
        "source-link":
          "https://github.com/clojure/clojure/blob/clojure-1.9.0-alpha14/src/clj/clojure/core.clj#L5145"
      },
      {
        "title": "assoc",
        "description":
          "Returns a new collection with the given value at the given index/key.",
        "examples": [
          {
            "lines": ["[*dot-green,dot-green,dot-green*]", "1 *rect-purple*)"],
            "output": ["[*dot-green,rect-purple,dot-green*]"]
          }
        ],
        "examples-link": "http://clojuredocs.org/clojure.core/assoc",
        "source-link":
          "https://github.com/clojure/clojure/blob/clojure-1.9.0-alpha14/src/clj/clojure/core.clj#L181"
      },

      {
        "title": "assoc-in",
        "description":
          "Returns a new nested collection with the given value at the given nested index/key vector.",
        "examples": [
          {
            "lines": [
              "[[*dot-blue,dot-blue*][*rect-purple,rect-purple*]]",
              "[1 0] *dot-green*)"
            ],
            "output": ["[[*dot-blue,dot-blue*][*dot-green,rect-purple*]]"]
          }
        ],
        "examples-link": "http://clojuredocs.org/clojure.core/assoc-in",
        "source-link":
          "https://github.com/clojure/clojure/blob/clojure-1.9.0-alpha14/src/clj/clojure/core.clj#L6043"
      }
    ]
  }
]
